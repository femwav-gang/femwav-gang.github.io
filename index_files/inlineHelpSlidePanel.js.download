Type.registerNamespace('VisualSP.InlineHelp');

VisualSP.InlineHelp.Globals = VisualSP.InlineHelp.Globals || {}
VisualSP.InlineHelp.Models = VisualSP.InlineHelp.Models || {};
VisualSP.InlineHelp.Utilities = VisualSP.InlineHelp.Utilities || {};

VisualSP.InlineHelp.Models.HelpItem = function (data) {
    this.Id = ko.observable(data.Id);
    this.Title = ko.observable(data.Title);
    this.Description = ko.observable(data.Description);
    this.Group = ko.observable(data.Group);
    this.GroupSequence = ko.observable(data.GroupSequence);
    this.Icon = ko.observable(data.Icon);
    this.IconSize = ko.observable(data.IconSize);
    this.Media = ko.observable(data.Media);
    this.Viewer = ko.observable(data.Viewer);
    this.ShowInNewWindow = ko.observable(data.ShowInNewWindow);
    this.UniqueId = ko.observable(data.UniqueId);
    this.RibbonItem = ko.observable(data);
    this.Selectors = ko.observableArray();
    for (var j = 0; j < data.Selectors.length; j++) {
        this.Selectors.push(data.Selectors[j]);
    }
    this.AutoShowOnView = ko.observable(data.AutoShowOnView);
    this.AutoShowOnViewAfter = ko.observable(data.AutoShowOnViewAfter);
    this.EditUrl = ko.observable(data.EditUrl);
    this.Editable = ko.observable(data.Editable);
};


VisualSP.InlineHelp.Globals.NullGuid = "00000000-0000-0000-0000-000000000000";
VisualSP.InlineHelp.Globals.DisableCache = false;

VisualSP.InlineHelp.Globals.ContentServiceHost = function () {
    var layoutsUrl = '_layouts';
    if (_spPageContextInfo.layoutsUrl != null) {
        layoutsUrl = _spPageContextInfo.layoutsUrl;
    }
    return _spPageContextInfo.webServerRelativeUrl.replace(/\/$/, "") + '/' + layoutsUrl + '/SharePointVideos.VisualSP/';
}();
VisualSP.InlineHelp.Globals.ServiceBaseUrl = function () {
    var vtibin = '_vti_bin';
    return _spPageContextInfo.webServerRelativeUrl.replace(/\/$/, "") + '/' + vtibin + '/SharePointVideos.VisualSP/';
}();

VisualSP.InlineHelp.Globals.AnalyticsService = VisualSP.InlineHelp.Globals.ServiceBaseUrl + 'Analytics.svc';
VisualSP.InlineHelp.Globals.InlineHelpService = VisualSP.InlineHelp.Globals.ServiceBaseUrl + 'InlineHelp.svc';
VisualSP.InlineHelp.Globals.ImagesUrl = VisualSP.InlineHelp.Globals.ContentServiceHost + '../Images/SharePointVideos.VisualSP/';
VisualSP.InlineHelp.Globals.InlineHelpIconDefault = _visualSpInlineHelpDefaultIcon;
VisualSP.InlineHelp.Globals.InlineHelpIconHover = _visualSpInlineHelpHoverIcon;

VisualSP.InlineHelp.Utilities.openDialog = function (url, title, callback) {
    var options = {
        url: url,
        title: title,
        allowMaximize: true,
        showClose: true,
        dialogReturnValueCallback: callback,
        height: (window.innerHeight * .6)
    }
    SP.SOD.execute('sp.ui.dialog.js', 'SP.UI.ModalDialog.showModalDialog', options);
    //SP.UI.ModalDialog.showModalDialog(options);
}
VisualSP.InlineHelp.Utilities.ensureJQuery = function (callback) {
    if (typeof (window.visualSPjQuery) == 'undefined') {
        var script = document.createElement('script');
        script.type = 'text/javascript';
        var layoutsUrl = '_layouts';
        if (_spPageContextInfo.layoutsUrl != null) {
            layoutsUrl = _spPageContextInfo.layoutsUrl;
        }
        script.src = _spPageContextInfo.webServerRelativeUrl.replace(/\/$/, "") + '/' + layoutsUrl + '/SharePointVideos.VisualSP/Scripts/jquery-1.10.2.min.js?rev=2';
        document.getElementsByTagName('head')[0].appendChild(script);

        ExecuteOrDelayUntilScriptLoaded(Function.createDelegate(null, callback), 'VisualSPjQuery.js');
    } else {
        callback();
    }
}
VisualSP.InlineHelp.Utilities.ensureKnockout = function (callback) {
    if (typeof (window.ko) == 'undefined') {
        var script = document.createElement('script');
        script.type = 'text/javascript';
        var layoutsUrl = '_layouts';
        if (_spPageContextInfo.layoutsUrl != null) {
            layoutsUrl = _spPageContextInfo.layoutsUrl;
        }
        script.src = _spPageContextInfo.webServerRelativeUrl.replace(/\/$/, "") + '/' + layoutsUrl + '/SharePointVideos.VisualSP/Scripts/knockout-3.3.0.js?rev=3';
        document.getElementsByTagName('head')[0].appendChild(script);

        ExecuteOrDelayUntilScriptLoaded(Function.createDelegate(null, callback), 'VisualSPKnockout.js');
    } else {
        callback();
    }
}
VisualSP.InlineHelp.Utilities.ensureMoment = function (callback) {
    if (typeof (window.moment) == 'undefined') {
        var script = document.createElement('script');
        script.type = 'text/javascript';
        var layoutsUrl = '_layouts';
        if (_spPageContextInfo.layoutsUrl != null) {
            layoutsUrl = _spPageContextInfo.layoutsUrl;
        }
        script.src = _spPageContextInfo.webServerRelativeUrl.replace(/\/$/, "") + '/' + layoutsUrl + '/SharePointVideos.VisualSP/Scripts/moment.min.js?rev=4';
        document.getElementsByTagName('head')[0].appendChild(script);

        ExecuteOrDelayUntilScriptLoaded(Function.createDelegate(null, callback), 'VisualSPMoment.js');
    } else {
        callback();
    }
}
VisualSP.InlineHelp.Utilities.ensureStrings = function (callback) {
    if (typeof (window.g_InlineHelpStrings) == 'undefined') {
        var stringsUrl = "";
        var stringsTag = $('script[src*="InlineHelpSlidePanel.strings"]');
        if (stringsTag != null) {
            stringsUrl = stringsTag.attr('src');
        }
        if (stringsUrl == null || stringsUrl.length == 0) {
            callback();
            return;
        }

        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = stringsUrl;
        document.getElementsByTagName('head')[0].appendChild(script);

        ExecuteOrDelayUntilScriptLoaded(Function.createDelegate(null, callback), 'InlineHelpSlidePanel.strings.js');
    } else {
        callback();
    }
}
VisualSP.InlineHelp.Utilities.ensureBootstrapSwitch = function (callback) {
    var script = document.createElement('script');
    script.type = 'text/javascript';
    var layoutsUrl = '_layouts';
    if (_spPageContextInfo.layoutsUrl != null) {
        layoutsUrl = _spPageContextInfo.layoutsUrl;
    }
    script.src = _spPageContextInfo.webServerRelativeUrl.replace(/\/$/, "") + '/' + layoutsUrl + '/SharePointVideos.VisualSP/Scripts/bootstrap-switch.js?rev=1';
    document.getElementsByTagName('head')[0].appendChild(script);

    ExecuteOrDelayUntilScriptLoaded(Function.createDelegate(null, callback), 'VisualSPBootstrapSwitch.js');
}

VisualSP.InlineHelp.Utilities.getParameterByName = function (name) {
    name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    var regexS = "[\\?&]" + name + "=([^&#]*)";
    var regex = new RegExp(regexS);
    var results = regex.exec(window.location.href);
    if (results == null) {
        return "";
    } else {
        return decodeURIComponent(results[1].replace(/\ /g, " "));
    }
}

VisualSP.InlineHelp.Utilities.Cookies = function () { }
VisualSP.InlineHelp.Utilities.Cookies.readCookie = function (name) {
    var nameEQ = name + '=';
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
}
VisualSP.InlineHelp.Utilities.Cookies.createCookie = function (name, value, days) {
    var expires = '';
    var domain = '';
    //if (domain.indexOf('.') >= 0) {
    //    domain = '; domain=' + window.location.host;
    //}
    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = '; expires=' + date.toGMTString();
    } else {
        expires = '; expires=' + moment().add(5, 'year').toDate().toGMTString();
    }
    document.cookie = name + '=' + value + domain + expires + '; path=/';
}

VisualSP.InlineHelp.Utilities.Cache = function () { }
VisualSP.InlineHelp.Utilities.Cache.getCachedValue = function (key) {
    if (VisualSP.InlineHelp.Utilities.getParameterByName('nocache') != '' || VisualSP.InlineHelp.Globals.DisableCache) {
        VisualSP.InlineHelp.Utilities.Cache.removeCachedValue(key);
    }
    var expiration = window.localStorage['visualsp-inlinehelp-' + key + '--expiration'];
    var isExpired = false;
    if (expiration != 'null' && expiration != null) {
        isExpired = moment(expiration) < (new Date());
    } else { isExpired = true; }
    var value = window.localStorage['visualsp-inlinehelp-' + key];
    if (value == 'null' || value == '' || isExpired) { value = null; }
    return value;
}
VisualSP.InlineHelp.Utilities.Cache.setCachedValue = function (key, value, expirationInHours) {
    window.localStorage.setItem('visualsp-inlinehelp-' + key, value)
    window.localStorage.setItem('visualsp-inlinehelp-' + key + '--expiration', moment().add('h', expirationInHours).format())
}
VisualSP.InlineHelp.Utilities.Cache.removeCachedValue = function (key) {
    window.localStorage.removeItem('visualsp-inlinehelp-' + key);
    window.localStorage.removeItem('visualsp-inlinehelp-' + key + '--expiration');
}
VisualSP.InlineHelp.Utilities.Cache.clearCache = function () {
    var toRemove = [];
    for (var i = 0; i < window.localStorage.length; i++) {
        if (window.localStorage.key(i).indexOf('visualsp-inlinehelp') >= 0) {
            toRemove.push(window.localStorage.key(i));
        }
    }
    for (var i = 0; i < toRemove.length; i++) {
        window.localStorage.removeItem(toRemove[i]);
    }
}

VisualSP.InlineHelp.Models.InlineHelpSlidePanel = function () {
    var $ = visualSPjQuery;
    var inlineHelpStrings = ko.observable(window.g_InlineHelpStrings);
    var inlineHelpEnabled = ko.observable(false);
    var editModeEnabled = ko.observable(false);
    var initialized = false;
    var interval = null;
	var helpItems = ko.observableArray();
	var selectedTarget = ko.observable({ 'Target': null, 'Initialized': false, 'Groups': ko.observableArray(), 'HelpItems': ko.observableArray() });
	function showInlineHelpHighlights(hidePanel) {
	    for (var i = 0; i < helpItems().length; i++) {
	        var item = helpItems()[i];
	        for (var j = 0; j < item.Selectors().length; j++) {
	            showInlineHelpHighlight(item, item.Selectors()[j]);
	        }
	    }
	    $('.visualsp-inlinehelp-target-icon').show();
	    if (hidePanel) {
	        hideSwitchboxPanel(true);
	    }
	}
	function hideInlineHelpHighlights() {
	    $('.visualsp-inlinehelp-target-highlight').removeClass('visualsp-inlinehelp-target-highlight');
	    $('.visualsp-inlinehelp-target-icon').hide();
	}
	function showInlineHelpHighlight(item, selectorText) {
	    var selector = '';
	    // If we have a jQuery selector then evaluate it as is.
	    if (selectorText.indexOf('$(') == 0) {
	        selector = eval(selectorText);
	    } else {
	        selector = eval('$("' + selectorText + '")');
	    }
	    if (selector.length == 0) {
	        selector = $(selectorText);
	    }
	    for (var i = 0; i < selector.length; i++) {
	        var element = $(selector[i]);
	        var config = element[0]['visualsp-help-config'];
	        if (config == null) {
	            config = { 'Target': element[0], 'SelectorText': selectorText, 'Initialized': false, 'Groups': ko.observableArray(), 'HelpItems': ko.observableArray() };
	            element[0]['visualsp-help-config'] = config;
	        }


	        var alreadyAdded = false;
	        var existingGroupNode = null;
	        for (var j = 0; j < config.Groups().length; j++) {
	            var groupNode = config.Groups()[j];
	            if (groupNode.Name == item.Group()) {
	                existingGroupNode = groupNode;
	            }
	            for (var k = 0; k < groupNode.HelpItems().length; k++) {
	                if (groupNode.HelpItems()[k].Id == item.Id) {
	                    alreadyAdded = true;
	                    break;
	                }
	            }
	        }
	        if (alreadyAdded) {
	            if ($(config.Icon).parent().length == 0 || config.Icon['visualsp-help-target'] != element[0] || element.parent().find('.visualsp-inlinehelp-target-icon').length == 0) {
	                //orphaned icon - need to re-add.
	                element.parent().append($(config.Icon));
	                config.Icon['visualsp-help-target'] = element[0];
	            }
	            continue;
	        }
	        if (existingGroupNode == null) {
	            existingGroupNode = { 'Name': item.Group(), 'HelpItems': ko.observableArray() };
	            config.Groups.push(existingGroupNode);
	        }
	        config.HelpItems.push(item);
	        existingGroupNode.HelpItems.push(item);
	        if (!config.Initialized) {
	            element.addClass('visualsp-inlinehelp-target');

	            var icon = $('<img class="visualsp-inlinehelp-target-icon" src="' + VisualSP.InlineHelp.Globals.InlineHelpIconDefault + '" alt="VisualSP Inline Help" role="button" tabindex="0" />');
	            icon.attr('data-visualsp-selector', selectorText);
	            icon[0]['visualsp-help-target'] = element[0];
	            element.parent().append(icon);
	            if (element.parents('#O365_NavHeader').length > 0) {
	                icon.css('position', 'absolute');
	            } else {
	                icon.css('position', 'relative');
	            }
	            config['Icon'] = icon[0];
	            icon.hover(
                    function (event) {
                        var target = $(event.currentTarget['visualsp-help-target']);
                        target.addClass('visualsp-inlinehelp-target-highlight');
                        $(this).attr('src', VisualSP.InlineHelp.Globals.InlineHelpIconHover);
                    },
                    function (event) {
                        var target = $(event.currentTarget['visualsp-help-target']);
                        target.removeClass('visualsp-inlinehelp-target-highlight');
                        $(this).attr('src', VisualSP.InlineHelp.Globals.InlineHelpIconDefault);
                    }
                );
	            icon.click(function (event) {
	                var config = event.currentTarget['visualsp-help-target']['visualsp-help-config'];
	                if ($('.visualsp-helpitemslist-container').length > 0) {
	                    var currentSelectedConfig = $('.visualsp-helpitemslist-container')[0]['visualsp-help-config'];
	                    if (currentSelectedConfig != null && currentSelectedConfig.Icon != config.Icon) {
	                        $('.visualsp-helpitemslist-container').hide();
	                    }
	                }
	                selectedTarget(config);

	                if ($('.visualsp-helpitemslist-container').is(':visible')) {
	                    $('.visualsp-helpitemslist-container').hide('slow');
	                } else {
	                    $('.visualsp-helpitemslist-container').show('slow', function () { adjustContextMenuPosition(); });
	                    adjustContextMenuPosition();
	                    if ($('.visualsp-helpitemslist-container').length > 0) {
	                        $('.visualsp-helpitemslist-container')[0]['visualsp-help-config'] = config;
	                    }
	                }
	                handleResize();
	                event.stopPropagation();
	                return false;
	            });


	            $('#s4-workspace').scroll(function () { adjustContextMenuPosition(); });

	            adjustIconPosition(element, icon);
	            config.Initialized = true;
	        }
	    }
	}
	function adjustContextMenuPosition() {
	    if (selectedTarget().Icon == null) { return; }
	    var icon = $(selectedTarget().Icon);
	    var top = icon.offset().top + 18;

	    if ($(window).height() < icon.offset().top + icon.innerHeight() + $('.visualsp-helpitemslist-container').innerHeight()) {
	        top = icon.offset().top - 2 - $('.visualsp-helpitemslist-container').innerHeight();
	    }
	    if (icon.offset().top - $('.visualsp-helpitemslist-container').innerHeight() < 0) {
	        top = icon.offset().top + 18;
	    }

	    var left = icon.offset().left;
	    if (left > $(window).innerWidth() - 250) {
	        left = icon.offset().left - 250 + 16;
	    }
	    if (parseInt($('.visualsp-helpitemslist-container').css('top').replace('px', '')) != parseInt(top)) {
	        $('.visualsp-helpitemslist-container').css('top', top);
	    }
	    if (parseInt($('.visualsp-helpitemslist-container').css('left').replace('px', '')) != parseInt(left)) {
	        $('.visualsp-helpitemslist-container').css('left', left);
	    }
	}
	function adjustIconPosition(element, icon) {
	    var topOffset = -8;
	    var leftOffset = -8;
	    if (element.parents('.ms-cui-groupBody').length > 0) {
	        topOffset = 0;
	        leftOffset = 0;
	    } else if (element.parents('.ms-cui-ribbon').length > 0) {
	        topOffset = 0;
	        leftOffset = -16;
	    }
	    if (element.offset() == null) { return; }
	    var top = element.offset().top + topOffset;
	    var left = element.offset().left + element.innerWidth() + leftOffset;
	    if (left + 16 > $(window).width()) {
	        left = $(window).width() - 16;
	    }
	    if (top < 0) {
	        top = 0;
	    }

	    if (parseInt(icon.offset().top) != parseInt(top) || parseInt(icon.offset().left) != parseInt(left)) {
	        icon.offset({ top: top, left: left });
	    }
	}
	function adjustIconPositions() {
	    $('.visualsp-inlinehelp-target-icon').each(function (index, value) {
	        var element = $(value['visualsp-help-target']);
	        var icon = $(value);
	        adjustIconPosition(element, icon);
	    });
	}
	function handleResize() {
	    if (inlineHelpEnabled()) {
	        var targetIcon = $('.visualsp-inlinehelp-target-icon');
	        var ribbonTopBars = $('.ms-cui-ribbonTopBars');
	        targetIcon.hide();
	        _ribbonScaleHeader(ribbonTopBars[0], false);
	        targetIcon.show();

	        window.setTimeout(function () {
	            targetIcon.hide();
	            _ribbonScaleHeader(ribbonTopBars[0], false);
	            targetIcon.show();
	            adjustIconPositions();
	            adjustContextMenuPosition();
	            window.setTimeout(function () {
	                targetIcon.hide();
	                _ribbonScaleHeader(ribbonTopBars[0], false);
	                targetIcon.show();
	            }, 100);
	        }, 100);
	    }
	    window.setTimeout(function () {
	        var panel = $('.visualsp-switchbox-panel');
	        if (panel == null || panel.length == 0) { return; }
	        var mainIcon = $('.visualsp-inlinehelp-mainicon');
	        if (mainIcon == null || mainIcon.length == 0) { return; }
	        panel.css('top', mainIcon.offset().top + 32);
	        var left = mainIcon.offset().left;
	        if (left > $(window).innerWidth() - 150) {
	            left = left - 150 + 16;
	        }
	        if (parseInt(panel.css('left').replace('px', '')) != parseInt(left)) {
	            panel.css('left', left);
	        }
	    }, 100);
	}
	function setTargetCount() {
	    for (var i = 0; i < helpItems().length; i++) {
	        var item = helpItems()[i];
	        for (var j = 0; j < item.Selectors().length; j++) {
	            $(item.Selectors()[j]).addClass('visualsp-inlinehelp-target');
	        }
	    }
	    var count = $('.visualsp-inlinehelp-target').length;
	    $('.visualsp-inlinehelp-mainicon-count').text(' (' + count + ')');
	}

	function toggleInlineHelp(newValue) {
	    if (newValue) {
	        if (helpItems().length == 0) {
	            loadHelpItems().then(function () {
	                trackHelpItems();
	                showInlineHelpHighlights(true);
	                setTargetCount();
	            });
	        } else {
	            showInlineHelpHighlights(true);
	            setTargetCount();
	        }
	        VisualSP.InlineHelp.Utilities.Cookies.createCookie('inlineHelpEnabled', 'true');
	        hideSwitchboxPanel(true);
	    } else {
	        hideInlineHelpHighlights();
	        VisualSP.InlineHelp.Utilities.Cookies.createCookie('inlineHelpEnabled', 'false');
	        setTargetCount();
	        hideSwitchboxPanel(true);
	    }
	}

	inlineHelpEnabled.subscribe(toggleInlineHelp);

	function toggleSwitchboxPanel() {
	    if ($('.visualsp-switchbox-panel').is(':visible')) {
	        hideSwitchboxPanel(false);
	    } else {
	        showSwitchboxPanel();
	    }
	}
	function showSwitchboxPanel() {
	    $('.visualsp-switchbox-panel').css('top', $('.visualsp-inlinehelp-mainicon').offset().top + 32);

	    var left = $('.visualsp-inlinehelp-mainicon').offset().left;
	    if (left > $(window).innerWidth() - 150) {
	        left = left - 150 + 16;
	    }

	    if (parseInt($('.visualsp-switchbox-panel').css('left').replace('px', '')) != parseInt(left)) {
	        $('.visualsp-switchbox-panel').css('left', left);
	    }

	    $('.visualsp-switchbox-panel').show('slow', function () {
	        $('.visualsp-switchbox-panel input').focus();
	    });
	    return false;
	}
	function hideSwitchboxPanel(delay) {
	    if (delay) {
	        window.setTimeout(function () {
	            $('.visualsp-switchbox-panel').hide('fast');
	        }, 750);
	    } else {
	        $('.visualsp-switchbox-panel').hide('slow');
	    }
	    return false;
	}
	function addHover(element, data) {
	    $(element).hover(
			function () { $(this).addClass("hover"); },
			function () { $(this).removeClass("hover"); }
		);
	}

	function ViewHelpItemCommand(helpItemSelected, viewModel) {
	    var title = helpItemSelected.Title();
	    var viewer = helpItemSelected.Viewer().toLowerCase();
	    var media = helpItemSelected.Media();
	    var showInNewWindow = helpItemSelected.ShowInNewWindow();

	    var ribbonItem = helpItemSelected.RibbonItem();
	    var url = VisualSP.InlineHelp.Globals.ContentServiceHost + 'MediaPage.aspx?';
	    url += 'ItemId=' + encodeURIComponent(ribbonItem.RibbonProviderItemId);
	    url += '&ListId=' + encodeURIComponent(ribbonItem.RibbonProviderListId);
	    url += '&WebId=' + encodeURIComponent(ribbonItem.RibbonProviderWebId);
	    url += '&SiteId=' + encodeURIComponent(ribbonItem.RibbonProviderSiteId);
	    url += '&Locale=' + encodeURIComponent(ribbonItem.Locale);
	    url += '&IsDlg=' + (showInNewWindow ? "0&PopOut=true" : "1");

	    if (helpItemSelected.UniqueId() != VisualSP.InlineHelp.Globals.NullGuid && !helpItemSelected.Editable()) {
	        var ribbonItem = helpItemSelected.RibbonItem();
	        VisualSPLogActivity(
                window.location.href,
                ribbonItem.RibbonProviderWebApplicationId,
                ribbonItem.RibbonProviderSiteId,
                ribbonItem.RibbonProviderWebId,
                ribbonItem.RibbonProviderListId,
                ribbonItem.RibbonProviderItemId,
                ribbonItem.UniqueId,
                ribbonItem.Locale,
                '',
                selectedTarget().SelectorText,
                'Inline Help')
	    }
	    $('.visualsp-helpitemslist-container').hide('slow');

	    if (helpItemSelected.Editable()) {
	        //window.open(helpItemSelected.EditUrl() + '&Source=' + encodeURIComponent(window.location.href));
	        VisualSP.InlineHelp.Utilities.openDialog(helpItemSelected.EditUrl() + '&Source=' + encodeURIComponent(window.location.href), 'Edit VisualSP Help Item', function () { });
	    } else {
	        if (viewer == 'image') {
	            VisualSPOpenImage(url, title, showInNewWindow);
	        } else if (viewer == 'document') {
	            VisualSPOpenPageOrDocument(media, title, showInNewWindow);
	        } else {
	            VisualSPCallMediaPage(url, title, showInNewWindow);
	        }
	    }
	    return false;
	}

	function addContainer() {
	    if ($('#VisualSPInlineHelpContainer').length > 0) { return; }
	    var container = document.createElement('div');
        container.setAttribute('id', 'VisualSPInlineHelpContainer');
        container.setAttribute('style', 'display:none');
        document.getElementsByTagName('body')[0].appendChild(container);
    }

    
	function loadHelpItems() {
	    helpItems([]);
	    return $.getJSON(VisualSP.InlineHelp.Globals.InlineHelpService + '/GetHelpItems',
            {
                noCache: (new Date()).getTime(),
                source: window.location.href
            })
        .done(function (data) {
            for (var i = 0; i < data.length; i++) {
                var helpItem = new VisualSP.InlineHelp.Models.HelpItem(data[i]);
                helpItems.push(helpItem);
            }
        })
        .fail(function (err) {
            var error = 'Error getting view: ' + err;
        });
	};

	function loadView(name, container) {
	    var dfd = $.Deferred();
	    var cachedHtml = VisualSP.InlineHelp.Utilities.Cache.getCachedValue('View-rev1-' + name);
	    if (cachedHtml != null) {
	        ko.cleanNode(visualSPjQuery('#VisualSPInlineHelpContainer')[0]);
	        $(container).html(cachedHtml);
	        dfd.resolve(true);
	        return dfd.promise();
	    }
	    return $.ajax({
	        url: VisualSP.InlineHelp.Globals.ContentServiceHost + 'InlineHelp/views/' + name + '.html',
	        cache: true,
	        async: true,
	        dataType: 'html',
	        type: 'GET'
	    })
        .then(function (data) {
            VisualSP.InlineHelp.Utilities.Cache.setCachedValue('View-rev1-' + name, data, 12);
            ko.cleanNode(visualSPjQuery('#VisualSPInlineHelpContainer')[0]);
            $(container).html(data);
        })
        .fail(function (xhr, status, errorThrown) {
            var error = 'Error getting view: ' + errorThrown;

        });
	}

	function resetForMDS() {
	    window.clearInterval(interval);
	    if (typeof asyncDeltaManager != "undefined") {
	        asyncDeltaManager.remove_endRequest(resetForMDS);
	    }
	    
	    VisualSP.InlineHelp.Utilities.ensureStrings(function () {
	        VisualSP.InlineHelp.Utilities.ensureKnockout(function () {
	            VisualSP.InlineHelp.Utilities.ensureMoment(function () {
	                var viewModelForMDS = new VisualSP.InlineHelp.Models.InlineHelpSlidePanel()
	                viewModelForMDS.activate();
	            });
	        });
	    });
	}

	function activate() {
	    // if initialized, previously, don't load the data
	    if (initialized) { return; }

	    if (typeof asyncDeltaManager != "undefined") {
	        asyncDeltaManager.remove_endRequest(resetForMDS);
	        asyncDeltaManager.add_endRequest(resetForMDS);
	    }

	    addContainer();
	    registerKnockoutBindings();
	    initialized = true;

	    if ($('.visualsp-inlinehelp-mainicon').length > 0) { $('.visualsp-inlinehelp-mainicon').remove(); }
	    var link = $('<a href="#" class="visualsp-inlinehelp-mainicon ms-promotedActionButton" style="display: inline-block;"><span class="s4-clust ms-promotedActionButton-icon" style="top:-1px; width: 16px; height: 16px; overflow: hidden; display: inline-block; position: relative;"><img style="position:absolute" alt="VisualSP Inline Help" src="' + VisualSP.InlineHelp.Globals.ImagesUrl + 'vsp_16.png" /></span><span class="visualsp-inlinehelp-mainicon-count ms-promotedActionButton-text"></span></a>');
	    link.click(toggleSwitchboxPanel);
	    link.prependTo($('#RibbonContainer-TabRowRight'));

	    var enabledCookieValue = VisualSP.InlineHelp.Utilities.Cookies.readCookie('inlineHelpEnabled');
	    if (enabledCookieValue == null) {
	        enabledCookieValue = _visualSpDefaultInlineHelpState.toString();
	    }
	    inlineHelpEnabled(enabledCookieValue == 'true');
	    var editModeEnabledCookieValue = VisualSP.InlineHelp.Utilities.Cookies.readCookie('visualSPEditModeEnabled');
	    editModeEnabled(editModeEnabledCookieValue == 'true');

	    $(document).unbind('click.closeHelpItemsList');
	    $(document).bind("click.closeHelpItemsList", function () {
	        if ($(arguments[0].target).parents('.visualsp-helpitemslist-container').length > 0) { return; }
	        $('.visualsp-helpitemslist-container').hide('slow');
	    });
	    $('.visualsp-helpitemslist-container').unbind('click.closeHelpItemsListStopPropagation');
	    $('.visualsp-helpitemslist-container').bind('click.closeHelpItemsListStopPropagation', function (event) {
	        event.stopPropagation();
	        return false;
	    });

        // Close the switch box panel if the user clicks anywhere other than the panel itself.
	    var self = this;
	    $(document).unbind('click.closeHelpItemsSwitchBoxPanel');
	    $(document).bind("click.closeHelpItemsSwitchBoxPanel", function () {
	        if ($(arguments[0].target).parents('.visualsp-switchbox-panel').length > 0) { return; }
	        if ($(arguments[0].target).parents('.visualsp-inlinehelp-mainicon').length > 0) { return; }
	        self.hideSwitchboxPanel(false);
	    });

        loadView('inlineHelpSlidePanel', '#VisualSPInlineHelpContainer').then(function () {
	        var enabled = inlineHelpEnabled();
	        ko.applyBindings(viewModel, visualSPjQuery('#VisualSPInlineHelpContainer')[0]);
	        inlineHelpEnabled(enabled);
	        // For some reason the switch is getting reset so we have to explicitly set the state to what it should be. (For MDS issues).
	        visualSPjQuery('.bootstrap-switch-container input').bootstrapSwitch('state', enabled);
	        if (!inlineHelpEnabled()) {
	            if (helpItems().length == 0) {
	                loadHelpItems().then(function () {
	                    trackHelpItems();
	                    setTargetCount();
	                });
	            } else {
	                setTargetCount();
	            }
	        }

	    });

	    interval = window.setInterval(function () {
	        if (inlineHelpEnabled()) {
	            showInlineHelpHighlights(false);
	        } else {
	            hideInlineHelpHighlights();
	        }
	        handleResize();
	        setTargetCount();
	    }, 1000);

	    $('#VisualSPInlineHelpContainer').show();
	    $(window).unbind('resize.visualSPHandleResize');
	    $(window).bind('resize.visualSPHandleResize', function () {
	        handleResize();
	    });

	    function listener(event) {
	        if (event.data == 'PopOut') {
	            SP.UI.ModalDialog.commonModalDialogClose(SP.UI.DialogResult.OK, event.data);
	        }
	    }
	    if (window.addEventListener) {
	        addEventListener("message", listener, false)
	    } else {
	        attachEvent("onmessage", listener)
	    }
	}

    function getLocalStorage(key) {
        return window.localStorage.getItem(key);
    }

    function setLocalStorage(key, value) {
        window.localStorage.setItem(key, value);
    }
    function find(array, predicate) {
        if (array == null) {
            throw new TypeError('"array" is null or not defined');
        }

        var o = array;
        var len = o.length >>> 0;
        if (typeof predicate !== 'function') {
            throw new TypeError('predicate must be a function');
        }

        var k = 0;
        while (k < len) {
            var kValue = o[k];
            if (predicate.call(this, kValue, k, o)) {
                return kValue;
            }
            k++;
        }
        return undefined;
    }
    function trackHelpItems() {
	    var newItems = 0;
	    var newItemsToUser = 0;
	    var itemsTracker = JSON.parse(getLocalStorage('VisualSpOnPremHelpItemsTracker'));
	    if (itemsTracker == null) {
	        itemsTracker = [];
	    }
	    var autoLoadHelpItem = null;
	    var helpItemsForTracking = [];
	    if (typeof (_visualSpHelpItemIdsForTracking) != 'undefined') {
	        for (var i = 0; i < _visualSpHelpItemIdsForTracking.length; i++) {
	            helpItemsForTracking.push(new VisualSP.InlineHelp.Models.HelpItem(_visualSpHelpItemIdsForTracking[i]));
	        }
	    }
	    if (typeof (_visualSpHelpItemIdsForTrackingFromWebPart) != 'undefined') {
	        for (var i = 0; i < _visualSpHelpItemIdsForTrackingFromWebPart.length; i++) {
	            if (find(helpItemsForTracking, function (hi) { return hi.UniqueId() == _visualSpHelpItemIdsForTrackingFromWebPart[i].UniqueId }) != undefined) {
	                continue;
	            }
	            helpItemsForTracking.push(new VisualSP.InlineHelp.Models.HelpItem(_visualSpHelpItemIdsForTrackingFromWebPart[i]));
	        }
	    }
	    for (var i = 0; i < helpItems().length; i++) {
	        var item = helpItems()[i];
	        if (find(helpItemsForTracking, function (hi) { return hi.UniqueId() == item.UniqueId() }) != undefined) {
	            continue;
	        }
	        for (var j = 0; j < item.Selectors().length; j++) {
	            var selectorText = item.Selectors()[j];
	            var selector = '';
	            // If we have a jQuery selector then evaluate it as is.
	            if (selectorText.indexOf('$(') == 0) {
	                selector = eval(selectorText);
	            } else {
	                selector = eval('$("' + selectorText + '")');
	            }
	            if (selector.length == 0) {
	                selector = $(selectorText);
	            }
	            if (selector.length > 0) {
	                helpItemsForTracking.push(item);
	                break;
	            }
	        }
	    }

	    for (var i = 0; i < helpItemsForTracking.length; i++) {
	        var helpItem = helpItemsForTracking[i];
	        var loadCountFromDateIncrement = 0;
	        if (helpItem.AutoShowOnViewAfter() != null && moment(helpItem.AutoShowOnViewAfter()) <= moment()) {
	            loadCountFromDateIncrement++;
	        }
	        var trackedItem = find(itemsTracker, function (nt) { return nt.HelpItemId == helpItem.UniqueId() });
	        if (trackedItem != undefined) {
	            trackedItem.LastLoadedDate = new Date();
	            trackedItem.LoadCount++;
	            if (trackedItem.LoadCountFromDate == null) {
	                trackedItem.LoadCountFromDate = loadCountFromDateIncrement;
	            } else {
	                trackedItem.LoadCountFromDate = trackedItem.LoadCountFromDate + loadCountFromDateIncrement;
	            }
	        } else {
	            trackedItem = {
	                HelpItemId: helpItem.UniqueId(),
	                LastLoadedDate: (new Date()),
	                LoadCount: 1,
	                LoadCountFromDate: loadCountFromDateIncrement
	            };
	            itemsTracker.push(trackedItem);
	        }
	        if (helpItem.AutoShowOnViewAfter == null) {
	            trackedItem.LoadCountFromDate = 0;
	        }

	        if (autoLoadHelpItem == null) {
	            if (helpItem.AutoShowOnView() != null && helpItem.AutoShowOnView() > 0) {
	                if (helpItem.AutoShowOnViewAfter() != null && moment(helpItem.AutoShowOnViewAfter()) <= moment() && helpItem.AutoShowOnView() == trackedItem.LoadCountFromDate) {
	                    autoLoadHelpItem = helpItem;
	                } else if (helpItem.AutoShowOnViewAfter() == null && helpItem.AutoShowOnView() == trackedItem.LoadCount) {
	                    autoLoadHelpItem = helpItem;
	                }
	            }
	        }
	    }
	    if (autoLoadHelpItem != null) {
	        ViewHelpItemCommand(autoLoadHelpItem);
	    }
	    setLocalStorage("VisualSpOnPremHelpItemsTracker", JSON.stringify(itemsTracker));
	}

	function registerKnockoutBindings() {
	    ko.bindingHandlers.bootstrapSwitch = {
	        init: function (element, valueAccessor, allBindingsAccessor) {
	            //initialize bootstrapSwitch
	            $(element).bootstrapSwitch();

	            // setting initial value
	            $(element).bootstrapSwitch('state', valueAccessor()());

	            //handle the field changing
	            $(element).on('switchChange.bootstrapSwitch', function (event, state) {
	                var observable = valueAccessor();
	                observable(state);
	            });

	            // Adding component options
	            var options = allBindingsAccessor().bootstrapSwitchOptions || {};
	            for (var property in options) {
	                $(element).bootstrapSwitch(property, ko.utils.unwrapObservable(options[property]));
	            }

	            //handle disposal (if KO removes by the template binding)
	            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
	                $(element).bootstrapSwitch("destroy");
	            });

	        },
	        //update the control when the view model changes
	        update: function (element, valueAccessor, allBindingsAccessor) {
	            var value = ko.utils.unwrapObservable(valueAccessor());

	            // Adding component options
	            var options = allBindingsAccessor().bootstrapSwitchOptions || {};
	            for (var property in options) {
	                $(element).bootstrapSwitch(property, ko.utils.unwrapObservable(options[property]));
	            }
	            $(element).bootstrapSwitch("state", value);
	        }
	    };
	    ko.bindingHandlers.htmlWithBinding = {
	        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
	            ko.utils.setHtml(element, valueAccessor());
	        }
	    };
	}

	var viewModel = {
	    title: 'VisualSP Inline Help',
	    activate: activate,
	    registerKnockoutBindings: registerKnockoutBindings,

	    inlineHelpEnabled: inlineHelpEnabled,
	    editModeEnabled: editModeEnabled,
	    helpItems: helpItems,
	    selectedTarget: selectedTarget,
	    addHover: addHover,

	    showSwitchboxPanel: showSwitchboxPanel,
	    hideSwitchboxPanel: hideSwitchboxPanel,
	    toggleSwitchboxPanel: toggleSwitchboxPanel,
	    ViewHelpItemCommand: ViewHelpItemCommand,

	    inlineHelpStrings: inlineHelpStrings
	};

	return viewModel;

}
VisualSP.InlineHelp.Utilities.ensureJQuery(function () {
    VisualSP.InlineHelp.Utilities.ensureKnockout(function () {
        VisualSP.InlineHelp.Utilities.ensureBootstrapSwitch(function () {
            VisualSP.InlineHelp.Utilities.ensureMoment(function () {
                visualSPjQuery(function () {
                    //if (visualSPjQuery.fn.button != undefined && visualSPjQuery.fn.button.noConflict != undefined) {
                    //    var btn = visualSPjQuery.fn.button.noConflict(); // reverts $.fn.button to jqueryui btn
                    //    visualSPjQuery.fn.btn = btn; // assigns bootstrap button functionality to $.fn.btn
                    //}
                    var viewModel = new VisualSP.InlineHelp.Models.InlineHelpSlidePanel();
                    viewModel.activate();
                });
            });
        });
    });
});
